-- Load necessary modules
local DataStoreService = game:GetService("DataStoreService")
local BanDataStore = DataStoreService:GetDataStore("BanDataStore")
local InsertService = game:GetService("InsertService")


-- Admin
local adminUsers = {
	[820456624] = true  -- Replace with your admin user ID
}

-- Check if admin
local function isAdmin(userId)
	return adminUsers[userId] or false
end

-- Function to find a player by partial name
local function findPlayerByPartialName(partialName)
	if not partialName then
		return nil
	end

	partialName = partialName:lower()
	for _, player in pairs(game.Players:GetPlayers()) do
		if player.Name:lower():find(partialName, 1, true) then
			return player
		end
	end
	return nil
end

--Table restore original position of the dumb duck before jailed
local originalPositions = {}

-- Create a table to store jailed players
local jailedPlayers = {}

-- Function to check if a player is jailed
local function isJailed(player)
	return jailedPlayers[player] == true
end

--- Create jail and tp player
local function jailPlayer(player)
	-- Getting the jail from my models
	local jailModelAssetId = 14394450468

	-- Load the jail model
	local success, jailModel = pcall(function()
		return InsertService:LoadAsset(jailModelAssetId)
	end)

	if success and jailModel then
		jailModel = jailModel:GetChildren()[1]
		if jailModel:IsA("Model") then
			local playerCharacter = player.Character
			if playerCharacter then
				-- Store the player's original position before jailing
				originalPositions[player] = player.Character.PrimaryPart.CFrame.Position

				-- Jail the player
				local clonedJailModel = jailModel:Clone()
				clonedJailModel.Parent = game.Workspace
				playerCharacter:SetPrimaryPartCFrame(clonedJailModel.PrimaryPart.CFrame)

				-- Mark the player as jailed
				jailedPlayers[player] = true
			else
				print("Player's character not found.")
			end
		else
			print("Jail model is not a valid Model.")
		end
	else
		print("Failed to load jail model.")
	end
end

-- Function to unjail a player
local function unjailPlayer(player)
	local cageModel = game.Workspace:FindFirstChild("Cage")

	if cageModel then
		-- Destroy the cage model, including its primary part
		cageModel:Destroy()

		print(player.Name .. " has been unjailed.")

		-- Remove the player from the jailedPlayers table
		jailedPlayers[player] = nil
	else
		print("Failed to unjail " .. player.Name .. ".")
	end
end


-- Check 2
game.Players.PlayerAdded:Connect(function(player)
	player.CharacterAdded:Connect(function(character)
		if isJailed(player) then
			jailPlayer(player)
				end
	end)
	local userId = player.UserId

	if isAdmin(userId) then
		print(player.Name .. " is an admin!")

		player.Chatted:Connect(function(message)
			if isAdmin(userId) then
				if message:sub(1, 6) == "kick " then
					local targetPlayerName = message:sub(7)
					local targetPlayer = findPlayerByPartialName(targetPlayerName)

					if targetPlayer then
						targetPlayer:Kick("You are temporarily banished from this realm.")
					else
						print("Player not found.")
					end
				elseif message:sub(1, 4) == "ban " then
					local targetPlayerName = message:sub(5)
					local targetPlayer = findPlayerByPartialName(targetPlayerName)

					if targetPlayer then
						local success, err = pcall(function()
							BanDataStore:SetAsync(targetPlayer.UserId, true)
						end)

						if success then
							targetPlayer:Kick("You have been permanently banished from this realm.")
						else
							print("Failed to ban player: " .. err)
						end
					else
						print("Player not found.")
					end
				elseif message:sub(1, 6) == "unban " then
					local targetUserId = tonumber(message:sub(7))
					if targetUserId then
						local success, err = pcall(function()
							BanDataStore:SetAsync(targetUserId, false)
						end)

						if success then
							print("Player with User ID " .. targetUserId .. " has been unbanned.")
						else
							print("Failed to unban player: " .. err)
						end
					else
						print("Invalid User ID provided.")
					end
				elseif message:sub(1, 5) == "kill " then
					local targetPlayerName = message:sub(6)
					local targetPlayer = findPlayerByPartialName(targetPlayerName)

					if targetPlayer then
						local humanoid = targetPlayer.Character and targetPlayer.Character:FindFirstChild("Humanoid")
						if humanoid then
							humanoid.Health = 0
						else
							print("Player's Humanoid not found.")
						end
					else
						print("Player not found.")
					end
				elseif message:sub(1, 2) == "tp" then
					local playerNames = message:sub(4)
					local player1Name, player2Name = playerNames:match("(%S+),%s*(%S+)")

					local player1 = findPlayerByPartialName(player1Name)
					local player2 = findPlayerByPartialName(player2Name)

					if player1 and player2 then
						local player1Character = player1.Character
						local player2HumanoidRootPart = player2.Character and player2.Character:FindFirstChild("HumanoidRootPart")

						if player1Character and player2HumanoidRootPart then
							player1Character:SetPrimaryPartCFrame(player2HumanoidRootPart.CFrame)
						else
							print("One or both players' characters not found.")
						end
					else
						print("One or both players not found.")
					end
				elseif message:sub(1, 3) == "god" then
					local targetPlayerName = message:sub(5)
					local targetPlayer = findPlayerByPartialName(targetPlayerName)

					if targetPlayer then
						local humanoid = targetPlayer.Character and targetPlayer.Character:FindFirstChild("Humanoid")
						if humanoid then
							humanoid.MaxHealth = math.huge
							humanoid.Health = math.huge
						else
							print("Player's Humanoid not found.")
						end
					else
						print("Player not found.")
					end
				elseif message:sub(1, 5) == "ungod" then
					local targetPlayerName = message:sub(7)
					local targetPlayer = findPlayerByPartialName(targetPlayerName)

					if targetPlayer then
						local humanoid = targetPlayer.Character and targetPlayer.Character:FindFirstChild("Humanoid")
						if humanoid then
							humanoid.MaxHealth = 100
							humanoid.Health = 100
						else
							print("Player's Humanoid not found.")
						end
					else
						print("Player not found.")
					end
				elseif message:sub(1, 4) == "jail" then
					local targetPlayerName = message:sub(6)
					local targetPlayer = findPlayerByPartialName(targetPlayerName)

					if targetPlayer then
						jailPlayer(targetPlayer)
						print(targetPlayer.Name .. " has been jailed.")
					else
						print("Player not found.")
					end
				elseif message:sub(1, 6) == "unjail" then
					local targetPlayerName = message:sub(8)
					local targetPlayer = findPlayerByPartialName(targetPlayerName)

					if targetPlayer then
						unjailPlayer(targetPlayer)
					else
						print("Player not found.")
						end
				end
			end
		end)
	else
		print(player.Name .. " is not an admin.")
	end
end)
